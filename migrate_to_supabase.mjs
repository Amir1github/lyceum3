import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';

console.log('üöÄ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω!');
console.log('–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', process.cwd());

// Supabase configuration
const supabaseUrl = 'https://zsvdqzefetzfdfaqgunb.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpzdmRxemVmZXR6ZmRmYXFndW5iIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg3OTk3NDksImV4cCI6MjA3NDM3NTc0OX0.3AJ6iMJmhKLDGhN7BMPDrXGCtJ_nFMGw8b3pZ1eZz4M';

const supabase = createClient(supabaseUrl, supabaseKey);

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
function readJsonFile(filename) {
  console.log(`\nüìÇ –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${filename}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏
  const possiblePaths = [
    path.join(process.cwd(), 'public', 'data', filename),
    path.join(process.cwd(), 'src', 'data', filename),
    path.join(process.cwd(), 'data', filename),
    path.join(process.cwd(), filename)
  ];

  console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –ø—É—Ç–∏:');
  possiblePaths.forEach((p, index) => {
    console.log(`  ${index + 1}. ${p}`);
  });

  let foundPath = null;
  for (const filePath of possiblePaths) {
    if (fs.existsSync(filePath)) {
      foundPath = filePath;
      console.log(`‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      break;
    }
  }

  if (!foundPath) {
    console.error(`‚ùå –§–∞–π–ª ${filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –ø—É—Ç–µ–π!`);
    
    // –ü–æ–∫–∞–∂–µ–º —á—Ç–æ –µ—Å—Ç—å –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    console.log('\nüìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:');
    try {
      const files = fs.readdirSync(process.cwd());
      files.forEach(file => {
        const isDir = fs.statSync(path.join(process.cwd(), file)).isDirectory();
        console.log(`  ${isDir ? 'üìÅ' : 'üìÑ'} ${file}`);
      });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', err);
    }
    
    return null;
  }

  try {
    const data = fs.readFileSync(foundPath, 'utf8');
    console.log(`‚úÖ –§–∞–π–ª ${filename} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω (${data.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
    
    const parsed = JSON.parse(data);
    console.log(`‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω`);
    console.log(`üìä –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${Array.isArray(parsed) ? '–º–∞—Å—Å–∏–≤' : typeof parsed}`);
    console.log(`üìä –†–∞–∑–º–µ—Ä: ${Array.isArray(parsed) ? parsed.length : Object.keys(parsed).length}`);
    
    return parsed;
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è/–ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ ${filename}:`, err.message);
    return null;
  }
}

// –ü—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Supabase
async function testSupabase() {
  console.log('\nüîå –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
  try {
    const { data, error } = await supabase.from('gallery').select('*').limit(1);
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error);
      return false;
    }
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç!');
    console.log('üìä –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã gallery:', data);
    return true;
  } catch (err) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ Supabase:', err);
    return false;
  }
}

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –≤–µ—Ä—Å–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –º–∏–≥—Ä–∞—Ü–∏–∏
async function migrateGallery() {
  console.log('\n=== üñºÔ∏è  –ú–ò–ì–†–ê–¶–ò–Ø –ì–ê–õ–ï–†–ï–ò ===');
  
  const galleryData = readJsonFile('gallery.json');
  if (!galleryData) {
    console.log('‚ùå –î–∞–Ω–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é');
    return false;
  }

  console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≥–∞–ª–µ—Ä–µ–∏:');
  console.log(JSON.stringify(galleryData, null, 2));

  // –ü—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
  try {
    const insertData = { images: galleryData[0]?.images || galleryData.images || [] };
    console.log('üì§ –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', insertData);

    const { data, error } = await supabase
      .from('gallery')
      .insert([insertData])
      .select();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≥–∞–ª–µ—Ä–µ–∏:', error);
      return false;
    }

    console.log('‚úÖ –ì–∞–ª–µ—Ä–µ—è —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞:', data);
    return true;
  } catch (err) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –≥–∞–ª–µ—Ä–µ–∏:', err);
    return false;
  }
}

async function migrateNews() {
  console.log('\n=== üì∞ –ú–ò–ì–†–ê–¶–ò–Ø –ù–û–í–û–°–¢–ï–ô ===');
  
  const newsData = readJsonFile('news.json');
  if (!newsData) {
    console.log('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é');
    return false;
  }

  console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${newsData.length} –Ω–æ–≤–æ—Å—Ç–µ–π`);
  console.log('üìã –ü–µ—Ä–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å:', newsData[0]);

  try {
    const newsToInsert = newsData.slice(0, 2).map(item => ({ // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –¥–ª—è —Ç–µ—Å—Ç–∞
      title: item.title,
      content: item.content,
      images: item.images || [],
      created_at: item.createdAt
    }));

    console.log('üì§ –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', newsToInsert);

    const { data, error } = await supabase
      .from('news')
      .insert(newsToInsert)
      .select();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:', error);
      return false;
    }

    console.log('‚úÖ –ù–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã:', data);
    return true;
  } catch (err) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:', err);
    return false;
  }
}

async function migrateContactInfo() {
  console.log('\n=== üìû –ú–ò–ì–†–ê–¶–ò–Ø –ö–û–ù–¢–ê–ö–¢–û–í ===');
  
  const contactData = readJsonFile('contact.json');
  if (!contactData) {
    console.log('‚ùå –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é');
    return false;
  }

  console.log('üìã –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
  console.log(JSON.stringify(contactData, null, 2));

  try {
    const { data, error } = await supabase
      .from('contact_info')
      .insert([contactData])
      .select();

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', error);
      return false;
    }

    console.log('‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã:', data);
    return true;
  } catch (err) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:', err);
    return false;
  }
}

// –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runDiagnostics() {
  console.log('\nüîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò ===');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö JSON —Ñ–∞–π–ª–æ–≤
  const jsonFiles = ['gallery.json', 'news.json', 'contact.json', 'classlist.json', 'cabinets.json'];
  
  console.log('\nüìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JSON —Ñ–∞–π–ª–æ–≤:');
  const availableFiles = [];
  jsonFiles.forEach(file => {
    const data = readJsonFile(file);
    if (data) {
      availableFiles.push(file);
    }
  });
  
  console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${availableFiles.length}/${jsonFiles.length}`);
  
  if (availableFiles.length === 0) {
    console.log('‚ùå –ù–∏ –æ–¥–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞.');
    return;
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º Supabase
  const supabaseOk = await testSupabase();
  if (!supabaseOk) {
    console.log('‚ùå Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞');
    return;
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
  const results = [];
  
  if (availableFiles.includes('gallery.json')) {
    const result = await migrateGallery();
    results.push({ name: 'Gallery', success: result });
  }
  
  if (availableFiles.includes('news.json')) {
    const result = await migrateNews();
    results.push({ name: 'News', success: result });
  }
  
  if (availableFiles.includes('contact.json')) {
    const result = await migrateContactInfo();
    results.push({ name: 'Contact', success: result });
  }

  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('\nüìä === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===');
  results.forEach(result => {
    console.log(`${result.success ? '‚úÖ' : '‚ùå'} ${result.name}`);
  });
  
  const successful = results.filter(r => r.success).length;
  console.log(`\nüéØ –£—Å–ø–µ—à–Ω–æ: ${successful}/${results.length}`);
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
console.log('üé¨ –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É...');

runDiagnostics()
  .then(() => {
    console.log('üèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  })
  .catch(err => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', err);
  });

export { runDiagnostics };